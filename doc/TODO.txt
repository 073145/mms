High Pri:
- Add a race mode, where the human controls with arrow keys like asteroids, races to the center
- Rewrite freeglut text so that it's performant
- Display a clock
- Sim speed increase, decrease rate as parameter
- Maze Validation (both physically valid mazes and competition valid mazes)
- MazeChecker class that hides the validation functions
- Figure out how to get rid of ifdefs in algorithm
- Make a SimInterface and make sure it's easy to "extract" an algorithm for use on Arduino
- Updates on the tile boundaries, not centers
- Other mouse movements - curve turns, j-turns, diagonals, etc.
- Add support for multiple mouse starting locations (both left and right corner)
- Add support for maze rotation
- Add support for mouse stating position rotation
- Actual distance values on the tile
- Support stepper motor / encoders interface
- Sensor readings for walls other than front, left right
- Get Tomasz's random maze algorithm working
- Include Arduino "types" with the MouseInterface
- More Arduino function support
- Add some nice LaTeX documentation
- Make a system for nearly instantly checking stats on many mazes:
    - like unit tests
    - solved or not
    - how many steps
    - ave steps
    - etc.
- Add gridlines (see https://www.youtube.com/watch?v=LGRutv9cGBA and https://www.youtube.com/watch?v=gtnTBf5ItEc)
- Draw a path of where the robot has been (the history object could be used for recording as well)

Med Pri:
- Crash animation for both modes
- Check megaMouse performance
    - Better implementation of sensor view collision detection
    - Figure out how to make sensors more efficient
    - Make the sensor polygon model better
- Add a way to set the text color of each tile individually
- Zoomed map mouse is a bit jumpy when going at high speeds
- Shortest path graphic (phantom bot that travels along other shortest paths)
- Randomly select a pre-defined maze
- Buffer communication (like with the real robot)
- Data recording for pause, rewind, fast forward
- Interrupt interface
- Run the program with maximum thread priority
- New maze w/o restarting app
- Be able to restart in the middle of a run (this is tricky with the algo thread...)
- Make terminal style output at bottom or right of window (GUI)
- Normalize random number generation (Implement Windows random number generation)
- Crash recovery semantics
- Make a nice mechanism for writing our own maze generation algorithms
- Add Wheel max speed (specificed in mouse parameter file)
- Change over the Makefile to use cmake
- In discrete mode, the mouse can overturn or go too far if the sim speed is to high. We need
to implement some logic that checks this ahead of time and then just teleports... sort of like
bullets in other physics simulators
- Add trajectory lines (see https://www.youtube.com/watch?v=kgJClVCPu3w)

Low-pri:
- Triangulate polygons upon creation?
- Use vertex buffer object for the mouse body (only triangulate the mouse once)
- Map borders
- Inconsistent wall declaration colors (declared wall on one side of wall, declared no wall on other side of wall)
- Inconsistent wall declaration colors (declared one side of wall but not the other)
- Perhaps impose memory limits on the algorithm
- Add a way to change the mouse color
- Support more than two wheels (let's hold off on this for now...)
- Bluetooth connection to the actual mouse
- Indicator of sim speed (real time, 10x fast, etc.)
- Change namespace of units from "sim" to "units"
- Change FreeGLUT to GLFW
- 3D

Clean-Up:
- Convert primitive types to GL types
- Return const references instead of values (pointers???)
- Change float to units (including in the ParamParser and Param class)
- Type safety (in terms of units) of the parameters
- Reduce includes as much as possible
- Rewrite the Makefile to use an "inc" directory
- Change "bool foo(false)" to "bool foo = false" for primitive - they look like function calls
- Handle bad values in the parameters, such as bad colors, negative values, etc.
- Put interface in root of src directory
- write "isDirectory(std::string path)" and enforce this where necessary
- write getRandom() and replace old calls to rand()
- Performance on different systems???
- The mouse sometimes rotates weirdly (goes slowly, backwards for a second, and then forwards fast.
    You can see what I mean by just increasing the view length of the sensors for a continuous algo)
- Remove as many c_str() as possible
- Replace "cout" with "print"
- Pass things by reference when possible
- Sprinkle assertions everywhere
- Validate the coding standards (especially "{" placement)
- Rewrite "i++" and "++i" as "i += 1"
- Give better explanations for the GeometryUtilities
- Buffer the declared walls and include a quick "resetWalls()" method
- Change the Mouse to use the technically correct position update implementation
- Clean up / improve the coding standards
- Put consts in GraphicUtilties (and other classes)
- Replace braket notation with methods (walls[NORTH] = true -> walls.insert(std::make_pair(NORTH, true)));
- Document the confusing coordinate systems
