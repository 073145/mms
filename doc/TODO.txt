High Pri:

- Set some numeric parameter min/max values in param.cpp

- Parameters...
    - Does printLateFrames (and others) make sense any more???

- Maze size requirements and validity

- Don't use P() or S() in a static context... it breaks things really badly... put this in coding standards
- Make a note of contributing projects in the documentation

- Document that the mouse always starts in the lower left, but can be rotated to simulate other orientatiosn

- Rewrite text so that it's performant
    - Make sure that MackAlgo looks normal... the walls look gray under the colored tiles...
- Put the vertex shader in its own source file
- Tile distances
    - Depending on the maze size, the valid distances will be different - make this the case for the text
- Actual distance values on the tile
    - MazeUtilities class that can get the distances???
    - State variable and key to control whether these are visible or not

- Put a toolbar at the top or bottom with info
- Display a clock
- Make some utility that keeps track of elapse time
    - Make the sim speed non-arbitrary

- Run-time parameters for the algos

- -Wall flag...

- Look at Tomasz' maze website
- Crash recovery semantics
    - mouse speed, elapsed time, etc.
- Maze Validation (both physically valid mazes and competition valid mazes)
    - Official maze size parameters
- Figure out how to get rid of ifdefs in algorithm
- Make a SimInterface and make sure it's easy to "extract" an algorithm for use on Arduino
- VSync so the graphics don't tear
- Updates on the tile boundaries, not centers
- Figure out a nice way to use a vector for the simulation, but an array for real life
- If you shrink the window too skinny, an assertion fails (line 47 of GraphicUtilties.cpp)
- Other mouse movements - curve turns, j-turns, diagonals, etc.
- Support stepper motor / encoders interface
- Sensor readings for walls other than front, left right
- Include Arduino "types" with the MouseInterface
- More Arduino function support
- Add some nice LaTeX documentation
- Make a system for nearly instantly checking stats on many mazes:
    - like unit tests
    - solved or not
    - how many steps
    - ave steps
    - etc.
- Add gridlines (see https://www.youtube.com/watch?v=LGRutv9cGBA and https://www.youtube.com/watch?v=gtnTBf5ItEc)
- Draw a path of where the robot has been (the history object could be used for recording as well)

Med Pri:
- Still view a maze if it passes validation, but don't let the sim continue...
- File paths on other platforms might be broken...
- Use vertex buffer object for the mouse body (only triangulate the mouse once)
    - Get rid of getInitialized method in mouse once we implement mouse drawing only once
- Check megaMouse performance
    - Better implementation of sensor view collision detection
    - Figure out how to make sensors more efficient
    - Make the sensor polygon model better
- Add manual mode high scores
- Add a way to set the text color of each tile individually
- Enum parameters?
- Make some functions available to the algo writers
- Zoomed map mouse is a bit jumpy when going at high speeds
- Shortest path graphic (phantom bot that travels along other shortest paths)
- Randomly select a pre-defined maze
- Write a good continuous algorithm
- Buffer communication (like with the real robot)
- Add a linter to the code
- Data recording for pause, rewind, fast forward
- Interrupt interface
- Run the program with maximum thread priority
- New maze w/o restarting app
- Fix the makefile so that if header files disappear we don't need to make clean
- Be able to restart in the middle of a run (this is tricky with the algo thread...)
- Make terminal style output at bottom or right of window (GUI)
- Normalize random number generation (Implement Windows random number generation) // TODO: Should be fixed...
- Make a nice mechanism for writing our own maze generation algorithms
- Add Wheel max speed (specificed in mouse parameter file)
- Change over the Makefile to use cmake
- In discrete mode, the mouse can overturn or go too far if the sim speed is to high. We need
to implement some logic that checks this ahead of time and then just teleports... sort of like
bullets in other physics simulators
- Add trajectory lines (see https://www.youtube.com/watch?v=kgJClVCPu3w)
- Error checking for param string type (startingDirection, color, etc.)

Low-pri:
- Better run number system
- Update the check_params.py script to make sure that the return type of the
  Param methods is the same as the type of the member variable
- Parameter for auto-generated maze name
- Detect STL use in maze and mouse algos, send a warning
- Triangulate polygons upon creation?
- Map borders
- Inconsistent wall declaration colors (declared wall on one side of wall, declared no wall on other side of wall)
- Inconsistent wall declaration colors (declared one side of wall but not the other)
- Perhaps impose memory limits on the algorithm
- Add a way to change the mouse color
- Support more than two wheels (let's hold off on this for now...)
- Bluetooth connection to the actual mouse
- Indicator of sim speed (real time, 10x fast, etc.)
- Change FreeGLUT to GLFW
- 3D
- Crash animation for both modes
- Unit tests
- Try to break the simulator from within the algos
- Colors for log statements
- De-duplicate some code in ParamParser... the usefulness of lots of logs
  though is that we're told which log it is. So we should write a function that
  get's the log strings, but the logging should still happen where it's currently
  happening.

Clean-Up:
- Change map.count(item) != 0 to map.find(item) != map.end()
- Add IMouseAlgorithm (and maze) to the build path so we can just do #include <IMouseAlgorithm.h>
- Run the parameter consistency script, make sure values align
- Convert primitive types to GL types
- Return const references instead of values (pointers???)
- Change float to units (including in the ParamParser and Param class)
- Type safety (in terms of units) of the parameters
- Reduce includes as much as possible
- Rewrite the Makefile to use an "inc" directory
- Change "bool foo(false)" to "bool foo = false" for primitive - they look like function calls
- Handle bad values in the parameters, such as bad colors, negative values, etc.
- Put interface in root of src directory
- write "isDirectory(std::string path)" and enforce this where necessary
- write getRandom() and replace old calls to rand()
- Performance on different systems???
- The mouse sometimes rotates weirdly (goes slowly, backwards for a second, and then forwards fast.
    You can see what I mean by just increasing the view length of the sensors for a continuous algo)
- Remove as many c_str() as possible
- Replace "cout" with "LOG"
- Pass things by reference when possible
- Sprinkle assertions everywhere
- Validate the coding standards (especially "{" placement)
- Rewrite "i++" and "++i" as "i += 1"
- Give better explanations for the GeometryUtilities
- Buffer the declared walls and include a quick "resetWalls()" method
- Change the Mouse to use the technically correct position update implementation
- Clean up / improve the coding standards
- Fit code into 80/100 columns... use a linter for this
- Put consts in GraphicUtilties (and other classes)
- Replace braket notation with methods (walls[NORTH] = true -> walls.insert(std::make_pair(NORTH, true)));
- Document the confusing coordinate systems
- for each loop iterations should use const references
- The interfaces don't need to be passed as pointers, right? Try passing as values...
- Upgrade convert_mazes.py to Python 3
- Move as much OpenGL code to a single file (Main.cpp) as possible
- P() be const? L()?
- init vs initialize
- Write a script to ensure that ASSERTS don't hold any state
- Ensure boolean operators aren't used in asserts... should be using a different assert
