#include "MazeFileUtilities.h"

#include <fstream>
#include <iostream>
#include <iterator>
#include <sstream>

#include "SimUtilities.h"

namespace sim {

std::pair<int, int> getMazeSize(std::string mazeFilePath) {

    // Note: This function should only be called on maze files that have been validated.
    // In particular, we assuming that the dimensions of the maze are given in the last,
    // line of the file, which might not be the case if the lines are properly sorted.

    // Read the last, non-empty line of the file
    std::ifstream file(mazeFilePath.c_str());
    std::string line("");
    std::string prevLine("");
    while (getline(file, line)) {
        if (!line.empty()) {
            prevLine = line;
        }
    }
    file.close();

    // Put the tokens in a vector
    std::istringstream iss(prevLine);
    std::vector<std::string> tokens;
    copy(std::istream_iterator<std::string>(iss), std::istream_iterator<std::string>(),
         std::back_inserter<std::vector<std::string>>(tokens));

    // Extract the width and height values, adding 1 because we started counting at 0
    int width = strToInt(tokens.at(0)) + 1;
    int height = strToInt(tokens.at(1)) + 1;
    return std::make_pair(width, height);
}

bool validMaze(std::string mazeFilePath) {

    // TODO: This should ensure a PHYSICALLY POSSIBLE MAZE
    // TODO: SOM
    // Format requires that:
    // - File exists
    // - The correct number of rows and columns
    // - rows and cols are in expected order
    // - The rows and columns labeled correctly
    // - Walls are all valid
    // - The maze is surrounded by walls
    // This means that the maze can be unsolvable and any size and shape

    // TODO: Do we want to perform maze validation on autogenerated mazes? probably, just for safe keeping and consistency

    // Create the file object
    std::ifstream file(mazeFilePath.c_str());

    // Error opening file
    if (!file.is_open()) {
        print("Error: Could not open \"" + mazeFilePath + "\" for maze validation");
        return false;
    }

    // Initialize a string variable
    std::string line("");

    // Current x and y position
    int x = 0;
    int y = 0;

    // A vector to hold all tiles' values
    std::vector<std::vector<BasicTile>> maze;

    while (std::getline(file, line)) {

        // Extract the whitespace separated tokens
        std::vector<std::string> tokens = tokenize(line);

        // Check to see that there are exactly six entries...
        if (6 != tokens.size()) {
            print("Error: \"" + mazeFilePath + "\" does not contain six entries on each line");
            return false;
        }

        // ... all of which are numeric
        for (int i = 0; i < tokens.size(); i += 1) {
            if (!isInt(tokens.at(i))) {
                print("Error: \"" + mazeFilePath + "\" contains non-numeric entries");
                return false;
            }
        }

        BasicTile tile;
        tile.xPosition = strToInt(tokens.at(0).c_str());
        tile.yPosition = strToInt(tokens.at(1).c_str());
        tile.isWallNorth = (1 == strToInt(tokens.at(2).c_str()));
        tile.isWallEast = (1 == strToInt(tokens.at(3).c_str()));
        tile.isWallSouth = (1 == strToInt(tokens.at(4).c_str()));
        tile.isWallWest = (1 == strToInt(tokens.at(5).c_str()));

        // TODO: Much more validation here
    }

    return true;
}

// TODO: Returns true if the maze file input follows all rules
// necessary to be an official micromouse maze, false otherwise
// NOTE: This function should only be called on valid mazes - that is,
// we can assume mazes are valid if this function is called
bool officialMaze(std::string mazeFilePath) {
    // TODO: SOM
    // Conditions:
    // 1.) Has a path to the center
    // 2.) No wall following robot can solve
    // Lots more...
    //
    // NOTE: It's probably a *really* good idea to make a helper function for each requirement, as in:
    // bool hasPathToCenter();
    // bool unsolvableByWallFollower();
    // etc.
    return false;
}

} // namespace sim
