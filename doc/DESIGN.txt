So basically the problem is that the position of the mouse needs to be updated every so often.
Previously, I used the MouseInterface to take care of this. That is, any time the algo code
called a movement method on the mouse, I updated the position of the mouse. However, this
tactic won't work with the new simulator. The reason is that the position of the mouse needs
to be updated more often than movement methods are called on the mouse. For instance, if we're
working with a DC motor, turning the motor on happens only once, but should cause the mouse
to continually move forward until the motor is explicitely turned off. Thus, we can no longer
make the assumption that the mouse should move if and only if a MouseInterface method is called.
Thus we can't simply update the mouse's position every time a interface method is called (note
that the algo logic would be "paused" while the simulation logic is carried out, but this wouldn't
effect the algo since the algo would be ignorant to the fact that the updates are being performed
at all).

The alternative to this is being able to update the position of the mouse constantly. Since we
can't make any assumptions about the execution of the algo code, we need to perform these
updates on a separate thread. However, this leads to concurracy issues.

Ideally, we want the algo to run exactly the same (or close to it) between different runs. This
requires that the mouse position be updated at the same points of the algo execution between runs,
since the algo movements directly depend on the mouse position. This seems to suggest that we
need some sort of global clock/synchronization between the simulation thread and the algo thread;
we could try to make sure that the simulation and algo each proceed a certain amount before either
is allowed to continue executing. However, since we can't make any assumptions about the algorithm
code (i.e., since we can't force it to wait until the simulation thread is ready to proceed),
this approach won't work.

So the question is this - how to we ensure clock/simulation synchronization between the algo
thread and the simulation thread so that our runs are consistent with one another?

The solution to this question is only partially satisfactory. For now, we'll have to ignore
that the algo and the sim might go out of synch, and hope that our algorithms can deal with
the small timing discrepancies.

Note that our visuals also have this same issue, but because the differences are so minute, we
don't notice them with the naked eye.
