Highest Priority
================
- Simple explore => extensive explore => extensive solve

High Priority
=============
- Improve the explore method of the floodfill algorithm
    - This could be done by calculating both the distance to the center AND the
      distance to that square from the starting square - no need to travel to 
      far away squares
- Autogenerate makefile dependencies
- When solving the maze, reduce the number of turns that the mouse makes
- Pass things by reference when possible
- Optimize the lists of modified cells

Medium Priority
===============
- Ensure that any file can be loaded regardless of maze size specification - output an error
- Make terminal style output at bottom or right of window
- Display another window of the robot's perception
- Make the shortest path look a little better

Low Priority
===============
- Make the mouse look prettier (draw black box around, or something)
- Handle the case when target tile is unreachable - it just crashes right now
- Ensure that all tiles are reachable in a randomly generated maze
- Ensure that the maze conforms to the spec as outlined in the rules
- The getClosestCenterTile() method in the Maze class only returns one center
  tile, even if two or more of them are equally close to the start - thus sometimes
  a valid shortest path is not indicated on the maze

Long Term
=========
- Make this a more realistic simulation by allowing angles, adding sensors, etc.
