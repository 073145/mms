High Priority
=============
- Maze Validation (Tomasz)
- Pass things by reference when possible
- Make a distinction between the mouse interface and sim interface
- Sim code should match the bot code *exactly*
- Dual screen! (mini-map and zoomed-in view)
- Figure out how the discrete and continuous interfaces can coexist

Medium Priority
===============
- New maze w/o restarting app
- Ensure that any file can be loaded regardless of maze size specification - output an error
- Make terminal style output at bottom or right of window
- Display another window of the robot's perception
- Make the shortest path look a little better
- Rewrite the Makefile to use an "inc" directory
- XML file for algorithm choice
- Indicator of sim speed

Low Priority
===============
- Sprinkle Assertions everywhere
- Make the mouse look prettier (draw black box around, or something)
- Handle the case when target tile is unreachable - it just crashes right now
- Ensure that all tiles are reachable in a randomly generated maze
- Ensure that the maze conforms to the spec as outlined in the rules
- The getClosestCenterTile() method in the Maze class only returns one center
  tile, even if two or more of them are equally close to the start - thus sometimes
  a valid shortest path is not indicated on the maze
- Validate the coding standards (especially "{" placement)
- Rewrite "i++" as "++i" or "i += 1"

Version 2.0
===========
- Make this a more realistic simulation by allowing angles, adding sensors, etc.
